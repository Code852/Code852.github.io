/*!
 * @name        easyzoom
 * @author       <>
 * @modified    Friday, May 15th, 2020
 * @version     2.5.2
 */
! function(t, e) {
  "use strict";
  "function" == typeof define && define.amd ? define(["jquery"], function(t) {
    e(t)
  }) : "object" == typeof module && module.exports ? module.exports = t.EasyZoom = e(require("jquery")) : t.EasyZoom = e(t.jQuery)
}(this, function(o) {
  "use strict";
  var c, l, d, p, u, f, i = {
    loadingNotice: "Loading image",
    errorNotice: "The image could not be loaded",
    errorDuration: 2500,
    linkAttribute: "href",
    preventClicks: !0,
    beforeShow: o.noop,
    beforeHide: o.noop,
    onShow: o.noop,
    onHide: o.noop,
    onMove: o.noop
  };

  function s(t, e) {
    this.$target = o(t), this.opts = o.extend({}, i, e, this.$target.data()), void 0 === this.isOpen && this._init()
  }
  return s.prototype._init = function() {
    this.$link = this.$target.find("a"), this.$image = this.$target.find("img"), this.$flyout = o('<div class="easyzoom-flyout" />'), this.$notice = o('<div class="easyzoom-notice" />'), this.$target.on({
      "mousemove.easyzoom touchmove.easyzoom": o.proxy(this._onMove, this),
      "mouseleave.easyzoom touchend.easyzoom": o.proxy(this._onLeave, this),
      "mouseenter.easyzoom touchstart.easyzoom": o.proxy(this._onEnter, this)
    }), this.opts.preventClicks && this.$target.on("click.easyzoom", function(t) {
      t.preventDefault()
    })
  }, s.prototype.show = function(t, e) {
    var i = this;
    if (!1 !== this.opts.beforeShow.call(this)) {
      if (!this.isReady) return this._loadImage(this.$link.attr(this.opts.linkAttribute), function() {
        !i.isMouseOver && e || i.show(t)
      });
      this.$target.append(this.$flyout);
      var o = this.$target.outerWidth(),
        s = this.$target.outerHeight(),
        h = this.$flyout.width(),
        n = this.$flyout.height(),
        a = this.$zoom.width(),
        r = this.$zoom.height();
      c = Math.ceil(a - h), l = Math.ceil(r - n), c < 0 && (c = 0), l < 0 && (l = 0), d = c / o, p = l / s, this.isOpen = !0, this.opts.onShow.call(this), t && this._move(t)
    }
  }, s.prototype._onEnter = function(t) {
    var e = t.originalEvent.touches;
    this.isMouseOver = !0, e && 1 != e.length || (t.preventDefault(), this.show(t, !0))
  }, s.prototype._onMove = function(t) {
    this.isOpen && (t.preventDefault(), this._move(t))
  }, s.prototype._onLeave = function() {
    this.isMouseOver = !1, this.isOpen && this.hide()
  }, s.prototype._onLoad = function(t) {
    t.currentTarget.width && (this.isReady = !0, this.$notice.detach(), this.$flyout.html(this.$zoom), this.$target.removeClass("is-loading").addClass("is-ready"), t.data.call && t.data())
  }, s.prototype._onError = function() {
    var t = this;
    this.$notice.text(this.opts.errorNotice), this.$target.removeClass("is-loading").addClass("is-error"), this.detachNotice = setTimeout(function() {
      t.$notice.detach(), t.detachNotice = null
    }, this.opts.errorDuration)
  }, s.prototype._loadImage = function(t, e) {
    var i = new Image;
    this.$target.addClass("is-loading").append(this.$notice.text(this.opts.loadingNotice)), this.$zoom = o(i).on("error", o.proxy(this._onError, this)).on("load", e, o.proxy(this._onLoad, this)), i.style.position = "absolute", i.src = t
  }, s.prototype._move = function(t) {
    if (0 === t.type.indexOf("touch")) {
      var e = t.touches || t.originalEvent.touches;
      u = e[0].pageX, f = e[0].pageY
    } else u = t.pageX || u, f = t.pageY || f;
    var i = this.$target.offset(),
      o = u - i.left,
      s = f - i.top,
      h = Math.ceil(o * d),
      n = Math.ceil(s * p);
    if (h < 0 || n < 0 || c < h || l < n) this.hide();
    else {
      var a = -1 * n,
        r = -1 * h;
      this.$zoom.css({
        top: a,
        left: r
      }), this.opts.onMove.call(this, a, r)
    }
  }, s.prototype.hide = function() {
    this.isOpen && !1 !== this.opts.beforeHide.call(this) && (this.$flyout.detach(), this.isOpen = !1, this.opts.onHide.call(this))
  }, s.prototype.swap = function(t, e, i) {
    this.hide(), this.isReady = !1, this.detachNotice && clearTimeout(this.detachNotice), this.$notice.parent().length && this.$notice.detach(), this.$target.removeClass("is-loading is-ready is-error"), this.$image.attr({
      src: t,
      srcset: o.isArray(i) ? i.join() : i
    }), this.$link.attr(this.opts.linkAttribute, e)
  }, s.prototype.teardown = function() {
    this.hide(), this.$target.off(".easyzoom").removeClass("is-loading is-ready is-error"), this.detachNotice && clearTimeout(this.detachNotice), delete this.$link, delete this.$zoom, delete this.$image, delete this.$notice, delete this.$flyout, delete this.isOpen, delete this.isReady
  }, o.fn.easyZoom = function(e) {
    return this.each(function() {
      var t = o.data(this, "easyZoom");
      t ? void 0 === t.isOpen && t._init() : o.data(this, "easyZoom", new s(this, e))
    })
  }, s
});
;/*})'"*/;/*})'"*/
(function($) {
  /**
   * Initialize easy zoom functionality.
   */
  Drupal.behaviors.easyzoom = {
    attach: function(context, settings) {

      // Instantiate EasyZoom instances.
      var $easyzoom = $('.easyzoom').easyZoom();

      // Setup thumbnails.
      var api1 = $easyzoom.filter('.easyzoom--with-thumbnails').data('easyZoom');
      $('.easyzoom-thumbnails').on('click', 'a', function(e) {
        var $this = $(this);

        e.preventDefault();

        // Use EasyZoom's `swap` method
        api1.swap($this.data('standard'), $this.attr('href'));
      });

    }
  }

})(jQuery);
;/*})'"*/;/*})'"*/
(function(){
  var fnIndex = 0;
  var fnSwitch = {};
  var fnList = {};
  var breakpoints = [];

    function setSwitch() {
      var onItems = fnSwitch[breaky.value].on;
      var onItemsLength = onItems.length;
      var offItems = fnSwitch[breaky.value].off;
      var offItemsLength = offItems.length;

      for ( var i = 0; i < onItemsLength; i++ ) {
        if(!fnList[onItems[i]].active) {
          fnList[onItems[i]].fn();
          fnList[onItems[i]].active = true;
        }
      }
      for ( var i = 0; i < offItemsLength; i++ ) {
        fnList[offItems[i]].active = false;
      }
    }

     function readValue( el ) {
      return window.getComputedStyle(
          document.querySelector(el), ':before'
        ).getPropertyValue( 'content' ).replace( /\"/g, '' ).replace( /\'/g, '' );
    }

    function appendFunction( fn ) {
      fnIndex++;
      fnList[fnIndex] = {};
      fnList[fnIndex]["fn"] = fn;
      fnList[fnIndex]["active"] = false;
    }
    function indexOf (collection, value) {
        if (Array.prototype.indexOf) {
            return collection.indexOf( value );
        }
        for (var i = 0, l = collection.length; i < l; i++) {
            if(value === collection[i]) {
                return i;
            }
        }
    }
    function connectFunction( view1, direction, view2 ) {
      var viewIndex1 = indexOf(breakpoints, view1);
      var viewIndex2 = indexOf(breakpoints, view2);

      for( var i = 0; i < breakpoints.length; i++ ) {
          if( i == viewIndex1 && direction == "at"
          || i <= viewIndex1 && direction == "below"
          || i >= viewIndex1 && direction == "above"
          || viewIndex1 <= i && i <= viewIndex2 &&  direction == "between" ) {
            fnSwitch[breakpoints[i]].on.push( fnIndex );
          } else {
            fnSwitch[breakpoints[i]].off.push( fnIndex );
          }
      }
      setSwitch();
    }

    function createFnSwitch() {
      breakpointsLength = breakpoints.length;
      for(var i = 0; i < breakpointsLength; i++ ) {
        fnSwitch[breakpoints[i]] = {};
        fnSwitch[breakpoints[i]].on = [];
        fnSwitch[breakpoints[i]].off = [];
      }
    }

    function connectAndAppendFn( fn, view1, direction, view2 ) {
      appendFunction( fn );
      connectFunction( view1, direction, view2 );
    }

    window.breaky = {
      below: function( view, fn ) {
        connectAndAppendFn( fn, view, "below" );
      },
      above: function( view, fn ) {
        connectAndAppendFn( fn, view, "above" );
      },
      between: function( view1, view2, fn ) {
        connectAndAppendFn( fn, view1, "between", view2 );
      },
      at : function( view, fn ) {
        connectAndAppendFn( fn, view, "at" );
      },
      initIE8 : function(bp, value) {
          if(!window.getComputedStyle) {
            breakpoints = bp;
            createFnSwitch();
            breaky.value = value;
          }
      },
      init : function() {
        breakpoints = readValue( "html" ).split( "," );
        createFnSwitch();
        breaky.value = readValue( "body" );
        window.onresize = function () {
          if(breaky.value !== readValue( "body" )) {
            breaky.value = readValue( "body" );
            setSwitch();
          }
        }
      }
     }
    if(window.getComputedStyle) {
      breaky.init();
    }
})();
;/*})'"*/;/*})'"*/
/**
 * @file
 * bootstrap.js
 *
 * Provides general enhancements and fixes to Bootstrap's JS files.
 */

var Drupal = Drupal || {};

(function($, Drupal){
  "use strict";

  Drupal.behaviors.bootstrap = {
    attach: function(context) {
      // Provide some Bootstrap tab/Drupal integration.
      $(context).find('.tabbable').once('bootstrap-tabs', function () {
        var $wrapper = $(this);
        var $tabs = $wrapper.find('.nav-tabs');
        var $content = $wrapper.find('.tab-content');
        var borderRadius = parseInt($content.css('borderBottomRightRadius'), 10);
        var bootstrapTabResize = function() {
          if ($wrapper.hasClass('tabs-left') || $wrapper.hasClass('tabs-right')) {
            $content.css('min-height', $tabs.outerHeight());
          }
        };
        // Add min-height on content for left and right tabs.
        bootstrapTabResize();
        // Detect tab switch.
        if ($wrapper.hasClass('tabs-left') || $wrapper.hasClass('tabs-right')) {
          $tabs.on('shown.bs.tab', 'a[data-toggle="tab"]', function (e) {
            bootstrapTabResize();
            if ($wrapper.hasClass('tabs-left')) {
              if ($(e.target).parent().is(':first-child')) {
                $content.css('borderTopLeftRadius', '0');
              }
              else {
                $content.css('borderTopLeftRadius', borderRadius + 'px');
              }
            }
            else {
              if ($(e.target).parent().is(':first-child')) {
                $content.css('borderTopRightRadius', '0');
              }
              else {
                $content.css('borderTopRightRadius', borderRadius + 'px');
              }
            }
          });
        }
      });
    }
  };

  /**
   * Bootstrap Popovers.
   */
  Drupal.behaviors.bootstrapPopovers = {
    attach: function (context, settings) {
      if (settings.bootstrap && settings.bootstrap.popoverEnabled) {
        var elements = $(context).find('[data-toggle="popover"]').toArray();
        for (var i = 0; i < elements.length; i++) {
          var $element = $(elements[i]);
          var options = $.extend(true, {}, settings.bootstrap.popoverOptions, $element.data());
          $element.popover(options);
        }
      }
    }
  };

  /**
   * Bootstrap Tooltips.
   */
  Drupal.behaviors.bootstrapTooltips = {
    attach: function (context, settings) {
      if (settings.bootstrap && settings.bootstrap.tooltipEnabled) {
        var elements = $(context).find('[data-toggle="tooltip"]').toArray();
        for (var i = 0; i < elements.length; i++) {
          var $element = $(elements[i]);
          var options = $.extend(true, {}, settings.bootstrap.tooltipOptions, $element.data());
          $element.tooltip(options);
        }
      }
    }
  };

  /**
   * Anchor fixes.
   */
  var $scrollableElement = $();
  Drupal.behaviors.bootstrapAnchors = {
    attach: function(context, settings) {
      var i, elements = ['html', 'body'];
      if (!$scrollableElement.length) {
        for (i = 0; i < elements.length; i++) {
          var $element = $(elements[i]);
          if ($element.scrollTop() > 0) {
            $scrollableElement = $element;
            break;
          }
          else {
            $element.scrollTop(1);
            if ($element.scrollTop() > 0) {
              $element.scrollTop(0);
              $scrollableElement = $element;
              break;
            }
          }
        }
      }
      if (!settings.bootstrap || !settings.bootstrap.anchorsFix) {
        return;
      }
      var anchors = $(context).find('a').toArray();
      for (i = 0; i < anchors.length; i++) {
        if (!anchors[i].scrollTo) {
          this.bootstrapAnchor(anchors[i]);
        }
      }
      $scrollableElement.once('bootstrap-anchors', function () {
        $scrollableElement.on('click.bootstrap-anchors', 'a[href*="#"]:not([data-toggle],[data-target])', function(e) {
          this.scrollTo(e);
        });
      });
    },
    bootstrapAnchor: function (element) {
      element.validAnchor = element.nodeName === 'A' && (location.hostname === element.hostname || !element.hostname) && element.hash.replace(/#/,'').length;
      element.scrollTo = function(event) {
        var attr = 'id';
        var $target = $(element.hash);
        if (!$target.length) {
          attr = 'name';
          $target = $('[name="' + element.hash.replace('#', '') + '"');
        }
        var offset = $target.offset().top - parseInt($scrollableElement.css('paddingTop'), 10) - parseInt($scrollableElement.css('marginTop'), 10);
        if (this.validAnchor && $target.length && offset > 0) {
          if (event) {
            event.preventDefault();
          }
          var $fakeAnchor = $('<div/>')
            .addClass('element-invisible')
            .attr(attr, $target.attr(attr))
            .css({
              position: 'absolute',
              top: offset + 'px',
              zIndex: -1000
            })
            .appendTo(document);
          $target.removeAttr(attr);
          var complete = function () {
            location.hash = element.hash;
            $fakeAnchor.remove();
            $target.attr(attr, element.hash.replace('#', ''));
          };
          if (Drupal.settings.bootstrap.anchorsSmoothScrolling) {
            $scrollableElement.animate({ scrollTop: offset, avoidTransforms: true }, 400, complete);
          }
          else {
            $scrollableElement.scrollTop(offset);
            complete();
          }
        }
      };
    }
  };

})(jQuery, Drupal);
;/*})'"*/;/*})'"*/
